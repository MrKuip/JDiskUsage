
plugins {
  id 'java-library'
  id 'eclipse'
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.1.0'
  id 'org.beryx.jlink' version '3.1.1'
}

defaultTasks 'jar'

test
{
  useJUnitPlatform()
  testLogging {
    showStandardStreams = true 
    afterTest { descriptor , result -> 
      logger.lifecycle("Test: " + descriptor.getClassName() + " " + descriptor.getName() + " -> " + result)
    }
  }
}

apply from: 'build-eclipse.gradle'

repositories {
  mavenCentral()
}

javafx {
    version = "24"
    modules = [ 'javafx.controls', 'javafx.web']
}

java {
  sourceCompatibility = JavaVersion.VERSION_23
  targetCompatibility = JavaVersion.VERSION_23
}

dependencies {
  implementation 'org.kku:fontIcons:1.0'
  implementation 'org.kku:commons-base:1.0.1'
  implementation 'org.kku:commons-fx:1.0.1'
  implementation 'com.miglayout:miglayout-javafx:11.4.2'
  implementation 'org.commonmark:commonmark:0.24.0'

  testImplementation 'org.junit.jupiter:junit-jupiter:5.13.1'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

application {
  mainClass.set('org.kku.jdiskusage.main.Main');
  mainModule.set('org.kku.jdiskusage');
}

import org.gradle.internal.os.OperatingSystem

def currentOs = OperatingSystem.current()

// Create a new release.
// A new tag will be created and github sees a new tag that starts with 'v' and 
//   then it executes the release.yaml
tasks.register("release") {
  group = "release"
  description = "Builds, tags, and pushes a new release"

  doLast {
    def tagName = "v${project.version}"
    println "creating release tag ${tagName}"

    // Create local tag
    exec {
      commandLine 'git', 'tag', '-f', tagName
    }

    // Push the tag to github
    exec {
      commandLine 'git', 'push', 'origin', tagName
    }
  }
}

jlink {
  options = ['--no-header-files', '--no-man-pages']
  launcher {
    name = 'jdiskusage'
  }
  jpackage {
    imageName = 'jdiskusage'
    if (currentOs.isLinux()) {
      installerType = 'deb'
    } else if (currentOs.isWindows()) {
      installerType = 'exe'
      installerOptions = ['--win-shortcut']
    } else if (currentOs.isMacOsX()) {
      installerType = 'dmg'
    }
  }
}

task initEclipseMetaData {
  doLast {
    createLauncher('Main', 'jdiskusage', 'org.kku.jdiskusage', 'org.kku.jdiskusage.main.Main')
  }
}


tasks.withType(JavaCompile) {
    options.deprecation = true
}

tasks.named("clean").configure {
    dependsOn gradle.includedBuilds*.task(":clean")
}

tasks.named("test").configure {
    dependsOn gradle.includedBuilds*.task(":test")
}

// We need the version in the app
task updateVersionProperties {
  def versionPropFile = file("src/main/resources/module-resources/Version.properties")
  def gradlePropFile = file("gradle.properties")

  inputs.file(gradlePropFile)
  outputs.file(versionPropFile)

  doLast {
    def currentVersion = project.version.toString()
    def props = new Properties()

    if (versionPropFile.exists()) {
      versionPropFile.withInputStream { props.load(it) }
    }

    def fileVersion = props.getProperty("version")

    println "current version is $currentVersion"
    println "version in resource file is $fileVersion"

    if (fileVersion != currentVersion) {
      props.setProperty("version", currentVersion)
      versionPropFile.parentFile.mkdirs()
      versionPropFile.withOutputStream { props.store(it, "Generated by Gradle") }
    } 
  }
}
processResources.dependsOn(updateVersionProperties)

